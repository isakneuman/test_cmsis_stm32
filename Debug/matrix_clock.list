
matrix_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005c4  080005c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080005c4  080005c4  000105c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080005c8  080005c8  000105c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080005cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  080005d0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000024  080005d0  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000e20  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000409  00000000  00000000  00020e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000120  00000000  00000000  00021258  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00021378  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000007a8  00000000  00000000  00021460  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000752  00000000  00000000  00021c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002235a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000320  00000000  00000000  000223d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080005ac 	.word	0x080005ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080005ac 	.word	0x080005ac

0800014c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015c:	2b00      	cmp	r3, #0
 800015e:	da0b      	bge.n	8000178 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000160:	490d      	ldr	r1, [pc, #52]	; (8000198 <NVIC_SetPriority+0x4c>)
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	f003 030f 	and.w	r3, r3, #15
 8000168:	3b04      	subs	r3, #4
 800016a:	683a      	ldr	r2, [r7, #0]
 800016c:	b2d2      	uxtb	r2, r2
 800016e:	0112      	lsls	r2, r2, #4
 8000170:	b2d2      	uxtb	r2, r2
 8000172:	440b      	add	r3, r1
 8000174:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000176:	e009      	b.n	800018c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000178:	4908      	ldr	r1, [pc, #32]	; (800019c <NVIC_SetPriority+0x50>)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	683a      	ldr	r2, [r7, #0]
 8000180:	b2d2      	uxtb	r2, r2
 8000182:	0112      	lsls	r2, r2, #4
 8000184:	b2d2      	uxtb	r2, r2
 8000186:	440b      	add	r3, r1
 8000188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	e000ed00 	.word	0xe000ed00
 800019c:	e000e100 	.word	0xe000e100

080001a0 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001ae:	d301      	bcc.n	80001b4 <SysTick_Config+0x14>
 80001b0:	2301      	movs	r3, #1
 80001b2:	e011      	b.n	80001d8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80001b4:	4a0a      	ldr	r2, [pc, #40]	; (80001e0 <SysTick_Config+0x40>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80001bc:	3b01      	subs	r3, #1
 80001be:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80001c0:	210f      	movs	r1, #15
 80001c2:	f04f 30ff 	mov.w	r0, #4294967295
 80001c6:	f7ff ffc1 	bl	800014c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001ca:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <SysTick_Config+0x40>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001d0:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <SysTick_Config+0x40>)
 80001d2:	2207      	movs	r2, #7
 80001d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80001d6:	2300      	movs	r3, #0
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	e000e010 	.word	0xe000e010

080001e4 <main>:
#include "main.h"

int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	init_led();
 80001e8:	f000 f86a 	bl	80002c0 <init_led>
	init_button();
 80001ec:	f000 f88a 	bl	8000304 <init_button>
	SysTick_Config(SystemCoreClock/1000);		// This function initialises the system tick timer and its interrupt and start the system tick timer.
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <main+0x24>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a05      	ldr	r2, [pc, #20]	; (800020c <main+0x28>)
 80001f6:	fba2 2303 	umull	r2, r3, r2, r3
 80001fa:	099b      	lsrs	r3, r3, #6
 80001fc:	4618      	mov	r0, r3
 80001fe:	f7ff ffcf 	bl	80001a0 <SysTick_Config>
	while (1)
	{
		//LED_toggle();
		//delay(1);
		// передача через USART IDLE
		click();
 8000202:	f000 f805 	bl	8000210 <click>
 8000206:	e7fc      	b.n	8000202 <main+0x1e>
 8000208:	20000000 	.word	0x20000000
 800020c:	10624dd3 	.word	0x10624dd3

08000210 <click>:
	}
}

void click(void){
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
	if ( (GPIOB->IDR & GPIO_IDR_IDR12) == GPIO_IDR_IDR12 )
 8000216:	4b1d      	ldr	r3, [pc, #116]	; (800028c <click+0x7c>)
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800021e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000222:	d102      	bne.n	800022a <click+0x1a>
		delay_with_interrupt(100);			// псевдоизбавление от дребезга, хотел через NVIC_EnableIRQ
 8000224:	2064      	movs	r0, #100	; 0x64
 8000226:	f000 f835 	bl	8000294 <delay_with_interrupt>
											// чет не получилось
		if ( (GPIOB->IDR & GPIO_IDR_IDR12) == GPIO_IDR_IDR12 ) {
 800022a:	4b18      	ldr	r3, [pc, #96]	; (800028c <click+0x7c>)
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000236:	d125      	bne.n	8000284 <click+0x74>
		//LED_toggle();						// если все же кнопка на самом деле нажата
		uint32_t start = ticks_delay;		// сохраняем время вхождения для отсчета от 1 - 3 сек
 8000238:	4b15      	ldr	r3, [pc, #84]	; (8000290 <click+0x80>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	607b      	str	r3, [r7, #4]
		while(GPIOB->IDR & GPIO_IDR_IDR12){	// пока есть высокий уровень
 800023e:	e01b      	b.n	8000278 <click+0x68>
		if( (ticks_delay-start)>1000 && (ticks_delay-start)<3000 ){
 8000240:	4b13      	ldr	r3, [pc, #76]	; (8000290 <click+0x80>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	1ad3      	subs	r3, r2, r3
 8000248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800024c:	d90e      	bls.n	800026c <click+0x5c>
 800024e:	4b10      	ldr	r3, [pc, #64]	; (8000290 <click+0x80>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800025a:	4293      	cmp	r3, r2
 800025c:	d806      	bhi.n	800026c <click+0x5c>
			GPIOB->ODR	|=	GPIO_ODR_ODR6;					// тут должна быть передача через UART hold
 800025e:	4a0b      	ldr	r2, [pc, #44]	; (800028c <click+0x7c>)
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <click+0x7c>)
 8000262:	68db      	ldr	r3, [r3, #12]
 8000264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000268:	60d3      	str	r3, [r2, #12]
 800026a:	e005      	b.n	8000278 <click+0x68>
															// но я такой тормоз который еле еле смог
		}													// на костылях прерывание создать
		else
			GPIOB->ODR	&=	~GPIO_ODR_ODR6;	// тут должна быть передача через UART click
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <click+0x7c>)
 800026e:	4b07      	ldr	r3, [pc, #28]	; (800028c <click+0x7c>)
 8000270:	68db      	ldr	r3, [r3, #12]
 8000272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000276:	60d3      	str	r3, [r2, #12]
		while(GPIOB->IDR & GPIO_IDR_IDR12){	// пока есть высокий уровень
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <click+0x7c>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1dd      	bne.n	8000240 <click+0x30>
		}
	}
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40010c00 	.word	0x40010c00
 8000290:	20000020 	.word	0x20000020

08000294 <delay_with_interrupt>:

void LED_toggle(void){
	GPIOB->ODR	^=	GPIO_ODR_ODR6;
}

void delay_with_interrupt(const uint32_t ms){
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	uint32_t start = ticks_delay;			// сохраняем время вхождения
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <delay_with_interrupt+0x28>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	60fb      	str	r3, [r7, #12]
	while( (ticks_delay-start)<ms );	// находимся в цикле, пока не насчитаем заданное мс
 80002a2:	bf00      	nop
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <delay_with_interrupt+0x28>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	1ad2      	subs	r2, r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d3f8      	bcc.n	80002a4 <delay_with_interrupt+0x10>
}
 80002b2:	bf00      	nop
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	20000020 	.word	0x20000020

080002c0 <init_led>:
    SysTick->CTRL &= ~SysTick_CTRL_COUNTFLAG_Msk;			// Сбрасываем COUNTFLAG вручную,

    SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;				// Enables the counter: 0 = counter disabled.
}

void init_led(void) {
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0

    // turn on GPIOA clocking

    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <init_led+0x3c>)
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <init_led+0x3c>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	f043 0308 	orr.w	r3, r3, #8
 80002ce:	6193      	str	r3, [r2, #24]

    // set gpio pin mode

    GPIOB->CRL &= ~GPIO_CRL_MODE6_0; // set as
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <init_led+0x40>)
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <init_led+0x40>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80002da:	6013      	str	r3, [r2, #0]

    GPIOB->CRL |= GPIO_CRL_MODE6_1;  // output with 2 MHz speed
 80002dc:	4a08      	ldr	r2, [pc, #32]	; (8000300 <init_led+0x40>)
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <init_led+0x40>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002e6:	6013      	str	r3, [r2, #0]

    GPIOB->CRL &= ~GPIO_CRL_CNF6;    // set as push-pull output
 80002e8:	4a05      	ldr	r2, [pc, #20]	; (8000300 <init_led+0x40>)
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <init_led+0x40>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80002f2:	6013      	str	r3, [r2, #0]

}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000
 8000300:	40010c00 	.word	0x40010c00

08000304 <init_button>:

void init_button(void){
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	//RCC->APB2ENR	|=	RCC_APB2ENR_IOPAEN;	// turn on GPIOA clocking

	GPIOB->CRH		&=	~GPIO_CRH_MODE12;	// 00: Input mode (reset state)
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <init_button+0x30>)
 800030a:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <init_button+0x30>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000312:	6053      	str	r3, [r2, #4]

	GPIOB->CRH		|=	GPIO_CRH_CNF12_1;	// 10: Input with pull-up / pull-down
 8000314:	4a07      	ldr	r2, [pc, #28]	; (8000334 <init_button+0x30>)
 8000316:	4b07      	ldr	r3, [pc, #28]	; (8000334 <init_button+0x30>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800031e:	6053      	str	r3, [r2, #4]
	GPIOB->CRH		&=	~GPIO_CRH_CNF12_0;
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <init_button+0x30>)
 8000322:	4b04      	ldr	r3, [pc, #16]	; (8000334 <init_button+0x30>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800032a:	6053      	str	r3, [r2, #4]
//	EXTI->RTSR |= EXTI_RTSR_TR5;			// RTSR (Rising trigger selection register)
    										// 1: Rising trigger enabled (for Event and Interrupt) for input line.

//	EXTI->FTSR &= ~EXTI_FTSR_TR5;			// FTSR (Falling trigger selection register)
    										// 0: Falling trigger disabled (for Event and Interrupt) for input line*/
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40010c00 	.word	0x40010c00

08000338 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000370 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800033c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800033e:	e003      	b.n	8000348 <LoopCopyDataInit>

08000340 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000342:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000344:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000346:	3104      	adds	r1, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000348:	480b      	ldr	r0, [pc, #44]	; (8000378 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800034a:	4b0c      	ldr	r3, [pc, #48]	; (800037c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800034c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800034e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000350:	d3f6      	bcc.n	8000340 <CopyDataInit>
	ldr	r2, =_sbss
 8000352:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000354:	e002      	b.n	800035c <LoopFillZerobss>

08000356 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000356:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000358:	f842 3b04 	str.w	r3, [r2], #4

0800035c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800035e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000360:	d3f9      	bcc.n	8000356 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000362:	f000 f845 	bl	80003f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000366:	f000 f8fd 	bl	8000564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800036a:	f7ff ff3b 	bl	80001e4 <main>
	bx	lr
 800036e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000370:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000374:	080005cc 	.word	0x080005cc
	ldr	r0, =_sdata
 8000378:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800037c:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000380:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000384:	20000024 	.word	0x20000024

08000388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC1_2_IRQHandler>

0800038a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr

08000396 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800039a:	e7fe      	b.n	800039a <HardFault_Handler+0x4>

0800039c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <MemManage_Handler+0x4>

080003a2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <BusFault_Handler+0x4>

080003a8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <UsageFault_Handler+0x4>

080003ae <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr

080003c6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
	...

080003d4 <SysTick_Handler>:
  */

volatile uint32_t ticks_delay = 0;

void SysTick_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	ticks_delay++;
 80003d8:	4b04      	ldr	r3, [pc, #16]	; (80003ec <SysTick_Handler+0x18>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	3301      	adds	r3, #1
 80003de:	4a03      	ldr	r2, [pc, #12]	; (80003ec <SysTick_Handler+0x18>)
 80003e0:	6013      	str	r3, [r2, #0]
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	20000020 	.word	0x20000020

080003f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003f4:	4a15      	ldr	r2, [pc, #84]	; (800044c <SystemInit+0x5c>)
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <SystemInit+0x5c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000400:	4912      	ldr	r1, [pc, #72]	; (800044c <SystemInit+0x5c>)
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <SystemInit+0x5c>)
 8000404:	685a      	ldr	r2, [r3, #4]
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <SystemInit+0x60>)
 8000408:	4013      	ands	r3, r2
 800040a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800040c:	4a0f      	ldr	r2, [pc, #60]	; (800044c <SystemInit+0x5c>)
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <SystemInit+0x5c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800041a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800041c:	4a0b      	ldr	r2, [pc, #44]	; (800044c <SystemInit+0x5c>)
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <SystemInit+0x5c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000426:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000428:	4a08      	ldr	r2, [pc, #32]	; (800044c <SystemInit+0x5c>)
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <SystemInit+0x5c>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000432:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <SystemInit+0x5c>)
 8000436:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800043a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800043c:	f000 f80c 	bl	8000458 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <SystemInit+0x64>)
 8000442:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000446:	609a      	str	r2, [r3, #8]
#endif 
}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000
 8000450:	f8ff0000 	.word	0xf8ff0000
 8000454:	e000ed00 	.word	0xe000ed00

08000458 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800045c:	f000 f802 	bl	8000464 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	2300      	movs	r3, #0
 8000470:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000472:	4a3a      	ldr	r2, [pc, #232]	; (800055c <SetSysClockTo72+0xf8>)
 8000474:	4b39      	ldr	r3, [pc, #228]	; (800055c <SetSysClockTo72+0xf8>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800047c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800047e:	4b37      	ldr	r3, [pc, #220]	; (800055c <SetSysClockTo72+0xf8>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000486:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3301      	adds	r3, #1
 800048c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d103      	bne.n	800049c <SetSysClockTo72+0x38>
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800049a:	d1f0      	bne.n	800047e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800049c:	4b2f      	ldr	r3, [pc, #188]	; (800055c <SetSysClockTo72+0xf8>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d002      	beq.n	80004ae <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80004a8:	2301      	movs	r3, #1
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	e001      	b.n	80004b2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80004ae:	2300      	movs	r3, #0
 80004b0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d14b      	bne.n	8000550 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80004b8:	4a29      	ldr	r2, [pc, #164]	; (8000560 <SetSysClockTo72+0xfc>)
 80004ba:	4b29      	ldr	r3, [pc, #164]	; (8000560 <SetSysClockTo72+0xfc>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f043 0310 	orr.w	r3, r3, #16
 80004c2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80004c4:	4a26      	ldr	r2, [pc, #152]	; (8000560 <SetSysClockTo72+0xfc>)
 80004c6:	4b26      	ldr	r3, [pc, #152]	; (8000560 <SetSysClockTo72+0xfc>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f023 0303 	bic.w	r3, r3, #3
 80004ce:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80004d0:	4a23      	ldr	r2, [pc, #140]	; (8000560 <SetSysClockTo72+0xfc>)
 80004d2:	4b23      	ldr	r3, [pc, #140]	; (8000560 <SetSysClockTo72+0xfc>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f043 0302 	orr.w	r3, r3, #2
 80004da:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80004dc:	4a1f      	ldr	r2, [pc, #124]	; (800055c <SetSysClockTo72+0xf8>)
 80004de:	4b1f      	ldr	r3, [pc, #124]	; (800055c <SetSysClockTo72+0xf8>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80004e4:	4a1d      	ldr	r2, [pc, #116]	; (800055c <SetSysClockTo72+0xf8>)
 80004e6:	4b1d      	ldr	r3, [pc, #116]	; (800055c <SetSysClockTo72+0xf8>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80004ec:	4a1b      	ldr	r2, [pc, #108]	; (800055c <SetSysClockTo72+0xf8>)
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <SetSysClockTo72+0xf8>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80004f8:	4a18      	ldr	r2, [pc, #96]	; (800055c <SetSysClockTo72+0xf8>)
 80004fa:	4b18      	ldr	r3, [pc, #96]	; (800055c <SetSysClockTo72+0xf8>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000502:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000504:	4a15      	ldr	r2, [pc, #84]	; (800055c <SetSysClockTo72+0xf8>)
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <SetSysClockTo72+0xf8>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800050e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000510:	4a12      	ldr	r2, [pc, #72]	; (800055c <SetSysClockTo72+0xf8>)
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <SetSysClockTo72+0xf8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800051a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800051c:	bf00      	nop
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <SetSysClockTo72+0xf8>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800052a:	4a0c      	ldr	r2, [pc, #48]	; (800055c <SetSysClockTo72+0xf8>)
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <SetSysClockTo72+0xf8>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	f023 0303 	bic.w	r3, r3, #3
 8000534:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <SetSysClockTo72+0xf8>)
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <SetSysClockTo72+0xf8>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000542:	bf00      	nop
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <SetSysClockTo72+0xf8>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	f003 030c 	and.w	r3, r3, #12
 800054c:	2b08      	cmp	r3, #8
 800054e:	d1f9      	bne.n	8000544 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	40022000 	.word	0x40022000

08000564 <__libc_init_array>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	2500      	movs	r5, #0
 8000568:	4e0c      	ldr	r6, [pc, #48]	; (800059c <__libc_init_array+0x38>)
 800056a:	4c0d      	ldr	r4, [pc, #52]	; (80005a0 <__libc_init_array+0x3c>)
 800056c:	1ba4      	subs	r4, r4, r6
 800056e:	10a4      	asrs	r4, r4, #2
 8000570:	42a5      	cmp	r5, r4
 8000572:	d109      	bne.n	8000588 <__libc_init_array+0x24>
 8000574:	f000 f81a 	bl	80005ac <_init>
 8000578:	2500      	movs	r5, #0
 800057a:	4e0a      	ldr	r6, [pc, #40]	; (80005a4 <__libc_init_array+0x40>)
 800057c:	4c0a      	ldr	r4, [pc, #40]	; (80005a8 <__libc_init_array+0x44>)
 800057e:	1ba4      	subs	r4, r4, r6
 8000580:	10a4      	asrs	r4, r4, #2
 8000582:	42a5      	cmp	r5, r4
 8000584:	d105      	bne.n	8000592 <__libc_init_array+0x2e>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800058c:	4798      	blx	r3
 800058e:	3501      	adds	r5, #1
 8000590:	e7ee      	b.n	8000570 <__libc_init_array+0xc>
 8000592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000596:	4798      	blx	r3
 8000598:	3501      	adds	r5, #1
 800059a:	e7f2      	b.n	8000582 <__libc_init_array+0x1e>
 800059c:	080005c4 	.word	0x080005c4
 80005a0:	080005c4 	.word	0x080005c4
 80005a4:	080005c4 	.word	0x080005c4
 80005a8:	080005c8 	.word	0x080005c8

080005ac <_init>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr

080005b8 <_fini>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	bf00      	nop
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr
